class Program 
{
	int a[100], l1[100], r1[100];
	void mergearr(int l, int mid, int r)
	{
		int i=0, j=0, k;
		int p, q;
		p = mid-l+1;
		q = r-mid;
		k = l;
		for h=0,p-1
		{
			l1[h] = a[l+h];
		}
		for h=0,q-1
		{
			r1[h] = a[mid+h+1];
		}
		for h=0,10
		{
			if((i<p && j<q) && h=10)
				h=0;
			if(i<p && j<q)
			{
				if(l1[i]<=r1[j])
				{
					a[k] = l1[i];
					i=i+1;
				}
				else
				{
					a[k] = r1[j];
					j=j+1;
				}
			}
			else
				break;
		}
		for h=i,n1-1
		{
			a[k] = l1[h];
			k=k+1;
		}
		for h=j, n2-1
		{
			a[k] = r1[h];
			k=k+1;
		}
	}
	void mergesort(int l, int r)
	{
		int mid;
		if( l < r)
		{
			mi = l + (r -l)/2;
			mergesort(l, mid);
			mergesort(mid+1, r);
			mergearr(l, mid, r);
		}
	}
	void main()
	{
		int n;
		callout("scanf", "%d", &n);
		for i=0,n-1
			callout("scanf", "%d", &a[i]);
		mergesort(0, n-1);
		for i=0,n-2
			callout("printf", "%d ", a[i]);
		callout("printf", "%d\n",a[n-1]);
	}
	
}